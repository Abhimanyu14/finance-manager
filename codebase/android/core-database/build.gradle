plugins {
    id "com.android.library"
    id "org.jetbrains.kotlin.android"
    id "kotlin-kapt"
    id "dagger.hilt.android.plugin"
    id "com.google.devtools.ksp" version "1.6.21-1.0.6"
}

// API Key
def apikeyPropertiesFile = rootProject.file("apikey.properties")
def apikeyProperties = new Properties()
apikeyProperties.load(new FileInputStream(apikeyPropertiesFile))

android {
    namespace "com.makeappssimple.abhimanyu.financemanager.android.core.database"
    compileSdk rootProject.compileSdkVersion

    defaultConfig {
        minSdk rootProject.minSdkVersion
        targetSdk rootProject.targetSdkVersion

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // Room schema
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }

        // should correspond to key/value pairs inside the file
        buildConfigField("String", "OPEN_EMOJI_KEY", apikeyProperties["OPEN_EMOJI_KEY"])
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"

        freeCompilerArgs += [
                "-Xopt-in=kotlin.RequiresOptIn",

                "-Xopt-in=kotlinx.coroutines.ExperimentalCoroutinesApi",
                "-Xopt-in=kotlinx.coroutines.FlowPreview",
                "-Xopt-in=kotlinx.coroutines.InternalCoroutinesApi",
                "-Xopt-in=kotlinx.coroutines.ObsoleteCoroutinesApi",

                "-Xopt-in=androidx.lifecycle.compose.ExperimentalLifecycleComposeApi",

                "-Xopt-in=androidx.compose.foundation.ExperimentalFoundationApi",

                "-Xopt-in=androidx.compose.animation.ExperimentalAnimationApi",
                "-Xopt-in=androidx.compose.runtime.ExperimentalComposeApi",
                "-Xopt-in=androidx.compose.ui.ExperimentalComposeUiApi",
                "-Xopt-in=androidx.compose.animation.core.InternalAnimationApi",
                "-Xopt-in=androidx.compose.material.ExperimentalMaterialApi",
                "-Xopt-in=androidx.compose.material3.ExperimentalMaterial3Api",

                "-Xopt-in=com.google.accompanist.navigation.material.ExperimentalMaterialNavigationApi",
                "-Xopt-in=com.google.accompanist.pager.ExperimentalPagerApi",
                "-Xopt-in=com.google.accompanist.permissions.ExperimentalPermissionsApi",

                "-Xopt-in=kotlin.contracts.ExperimentalContracts",

                "-Xopt-in=kotlin.ExperimentalUnsignedTypes",

                "-Xopt-in=kotlin.time.ExperimentalTime"
        ]
    }

    // Room schema for testing
    sourceSets {
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }
}

ksp {
    arg("room.schemaLocation", "$projectDir/schemas")
}

dependencies {
    implementation project(":core-common")
    implementation project(":core-model")

    testImplementation project(":core-testing")

    androidTestImplementation project(":core-testing")

    // Androidx core
    implementation "androidx.core:core-ktx:$rootProject.androidXCoreVersion"

    // Appcompat
    implementation "androidx.appcompat:appcompat:$rootProject.appCompatVersion"

    // Coroutines
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:$rootProject.coroutinesVersion")

    // Hilt
    implementation "com.google.dagger:hilt-android:$rootProject.hiltVersion"
    kapt "com.google.dagger:hilt-compiler:$rootProject.hiltVersion"
    implementation "androidx.hilt:hilt-lifecycle-viewmodel:$rootProject.hiltLifecycleViewModelVersion"
    kapt "androidx.hilt:hilt-compiler:$rootProject.hiltCompilerVersion"

    // KSP
    implementation "com.google.devtools.ksp:symbol-processing-api:$rootProject.kspVersion"

    // Moshi
    implementation "com.squareup.moshi:moshi:$rootProject.moshiVersion"
    implementation "com.squareup.moshi:moshi-kotlin:$rootProject.moshiKotlinVersion"
    ksp "com.squareup.moshi:moshi-kotlin-codegen:$rootProject.moshiVersion"

    // Retrofit with Moshi Converter
    implementation "com.squareup.retrofit2:converter-moshi:$rootProject.retrofitMoshiConverterVersion"

    // Gson
    implementation "com.google.code.gson:gson:$rootProject.gsonVersion"

    // Paging
    implementation "androidx.paging:paging-runtime-ktx:$rootProject.pagingVersion"

    // Data store
    implementation "androidx.datastore:datastore-preferences:$rootProject.datastorePreferencesVersion"

    // Room
    implementation "androidx.room:room-runtime:$rootProject.roomVersion"
    implementation "androidx.room:room-ktx:$rootProject.roomVersion"
    annotationProcessor "androidx.room:room-compiler:$rootProject.roomVersion"
    ksp "androidx.room:room-compiler:$rootProject.roomVersion"
    androidTestImplementation "androidx.room:room-testing:$rootProject.roomVersion"

    // Testing

    // Junit
    testImplementation "junit:junit:$rootProject.junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$rootProject.androidXJUnitExtensionVersion"

    // Mockito kotlin
    testImplementation "org.mockito.kotlin:mockito-kotlin:$rootProject.mockitoKotlinVersion"

    // Coroutines test
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$rootProject.coroutinesTestVersion"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$rootProject.coroutinesTestVersion"

    // Jacoco
    androidTestImplementation "androidx.test:runner:$rootProject.testRunnerVersion"
    androidTestImplementation "androidx.test:rules:$rootProject.testRulesVersion"
}
