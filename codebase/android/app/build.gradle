plugins {
    alias libs.plugins.android.application
    id "jacoco" // TODO(Abhi): Change to version catalog
    alias libs.plugins.kotlin.android
    alias libs.plugins.kotlin.kapt
    alias libs.plugins.kotlinx.kover
    alias libs.plugins.ksp
    alias libs.plugins.hilt.android
    alias libs.plugins.google.services
    alias libs.plugins.firebase.crashlytics
    alias libs.plugins.detekt
    alias libs.plugins.about.libraries
}

/*
// Kover
kover {
    // true to disable instrumentation of all Kover tasks in this project
    isDisabled.set(false)

    // change instrumentation agent and reporter
    coverageEngine.set(kotlinx.kover.api.CoverageEngine.INTELLIJ)

    intellijEngineVersion.set("1.0.668")    // change version of IntelliJ agent and reporter
    jacocoEngineVersion.set("0.8.7")        // change version of JaCoCo agent and reporter

    // false to do not execute `koverMergedReport` task before `check` task
    generateReportOnCheck = true

    // ["project-name"] or [":project-name"] to disable coverage for project with path `:project-name` (`:` for the root project)
    disabledProjects = []

    // true to instrument packages `android.*` and `com.android.*`
    instrumentAndroidPackage = false

    // true to run all tests in all projects if `koverHtmlReport`, `koverXmlReport`, `koverReport`, `koverVerify` or `check` tasks executed on some project
}
*/

tasks.koverHtmlReport {
    excludes = [
            // Hilt
            "*.di.*",
            "dagger.hilt.**",
            "hilt_aggregated_deps.*",
            "com.makeappssimple.abhimanyu.financemanager.android.*.*_Factory",

            // Room
            // MyRoomDatabase_AutoMigration_*_Impl, *Dao_Impl
            "com.makeappssimple.abhimanyu.financemanager.android.*.*_Impl*",

            // BuildConfig
            "com.makeappssimple.abhimanyu.financemanager.android.BuildConfig",

            // Moshi - Json Adapter
            "com.makeappssimple.abhimanyu.financemanager.android.*.*JsonAdapter",

            // UI
            "com.makeappssimple.abhimanyu.financemanager.android.ui.*"
    ]
}

/*
// TODO(Abhi): Jacoco
// Jacoco
jacoco {
    toolVersion = "$jacocoVersion"
}

tasks.withType(Test) {
    jacoco {
        includeNoLocationClasses = true
        excludes = ["jdk.internal.*"] // Allows it to run on Java 11
    }
}
*/

//task jacocoTestReport(type: JacocoReport, dependsOn: ["testDebugUnitTest", "createDebugCoverageReport"]) {
//    reports {
//        xml.enabled true
//        html.enabled true
//    }
//    def fileFilter = [
//            "**/R.class",
//            "**/R$*.class",
//            "**/BuildConfig.*",
//            "**/Manifest*.*",
//            "**/*Test*.*",
//            "android/**/*.*",
//            "**/*$[0-9].*"
//    ]
//    def mainSrc = "$project.projectDir/src/main/java"
//    def javaDebugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
//    def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
//
//    sourceDirectories.from = files([mainSrc])
//    classDirectories.from = files([javaDebugTree], [kotlinDebugTree])
//    executionData.from = fileTree(dir: project.buildDir, includes: [
//            "jacoco/testDebugUnitTest.exec",
//            "outputs/code-coverage/connected/*coverage.ec",
//            "outputs/code_coverage/debugAndroidTest/connected/**/*.ec"
//    ])
//}


// API Key
def apikeyPropertiesFile = rootProject.file("apikey.properties")
def apikeyProperties = new Properties()
apikeyProperties.load(new FileInputStream(apikeyPropertiesFile))

android {
    namespace "com.makeappssimple.abhimanyu.financemanager.android"
    compileSdk rootProject.compileSdkVersion

    defaultConfig {
        applicationId "com.makeappssimple.abhimanyu.financemanager.android"
        minSdk rootProject.minSdkVersion
        targetSdk rootProject.targetSdkVersion
        versionCode rootProject.appVersionCode
        versionName rootProject.appVersionName

        testInstrumentationRunner "com.makeappssimple.abhimanyu.financemanager.android.core.testing.MyTestRunner"
        vectorDrawables {
            useSupportLibrary true
        }

        // Room schema
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }

        // should correspond to key/value pairs inside the file
        buildConfigField("String", "OPEN_EMOJI_KEY", apikeyProperties["OPEN_EMOJI_KEY"])
    }

    buildTypes {
        release {
            debuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
        }
        debug {
            applicationIdSuffix ".debug"
            debuggable true
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"

            // This should be true for Jacoco but false for compose testing
            // Jacoco
            testCoverageEnabled false
        }
    }

    // Kover
    testOptions {
//        unitTests {
//            returnDefaultValues = true
//        }

        unitTests.all {
            if (name == "testDebugUnitTest") {
                kover {
                    // disabled = false
                    // binaryReportFile.set(file("$buildDir/custom/debug-report.bin"))
                    includes = [
                            "com.makeappssimple.abhimanyu.financemanager.android.*"
                    ]
                    excludes = [
                            "com.makeappssimple.abhimanyu.financemanager.android.ui.*",
                            "com.makeappssimple.abhimanyu.financemanager.android.navigation.di.NavigationManagerModule"
                    ]
                }
            }
        }
    }

    /*
    // TODO(Abhi): Jacoco
    // Jacoco
    testOptions {
        *//*execution "ANDROIDX_TEST_ORCHESTRATOR"*//*
        animationsDisabled true

        unitTests {
            all {
                jvmArgs "-noverify", "-ea"
                jacoco {
                    includeNoLocationClasses = true
                }
            }
            includeAndroidResources = true
        }
    }
    */

    compileOptions {
        // Flag to enable support for the new language APIs
        coreLibraryDesugaringEnabled = true

        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"

        // Removed in Kotlin 1.7
        // Reference - https://stackoverflow.com/a/72864142/9636037
        // useIR = true

        freeCompilerArgs += [
                // Kotlin
                "-opt-in=kotlin.RequiresOptIn",
                "-opt-in=kotlin.contracts.ExperimentalContracts",
                "-opt-in=kotlin.ExperimentalUnsignedTypes",
                "-opt-in=kotlin.time.ExperimentalTime",

                // Kotlinx
                "-opt-in=kotlinx.coroutines.ExperimentalCoroutinesApi",
                "-opt-in=kotlinx.coroutines.FlowPreview",
                "-opt-in=kotlinx.coroutines.InternalCoroutinesApi",
                "-opt-in=kotlinx.coroutines.ObsoleteCoroutinesApi",
                "-opt-in=kotlinx.serialization.ExperimentalSerializationApi",

                // Androidx lifecycle
                "-opt-in=androidx.lifecycle.compose.ExperimentalLifecycleComposeApi",

                // Compose
                "-opt-in=androidx.compose.runtime.ExperimentalComposeApi",
                "-opt-in=androidx.compose.foundation.ExperimentalFoundationApi",
                "-opt-in=androidx.compose.ui.ExperimentalComposeUiApi",
                "-opt-in=androidx.compose.material3.ExperimentalMaterial3Api",
                "-opt-in=androidx.compose.animation.ExperimentalAnimationApi",
                "-opt-in=androidx.compose.animation.core.InternalAnimationApi",
        ]
    }

    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion jetpackComposeCompilerVersion
    }

    packagingOptions {
        resources {
            excludes += "/META-INF/{AL2.0,LGPL2.1}"
        }
    }

    // Room schema for testing
    sourceSets {
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }
}

ksp {
    arg("room.schemaLocation", "$projectDir/schemas")
}

dependencies {
    implementation project(":core:alarmkit")
    implementation project(":core:alarmkitimpl")
    implementation project(":core:appkit")
    implementation project(":core:boot")
    implementation project(":core:common")
    implementation project(":core:data")
    implementation project(":core:database")
    implementation project(":core:datastore")
    implementation project(":core:designsystem")
    implementation project(":core:logger")
    implementation project(":core:navigation")
    implementation project(":core:notificationkit")
    implementation project(":core:notificationkitimpl")
    implementation project(":core:time")
    implementation project(":core:ui")
    implementation project(":feature:accounts")
    implementation project(":feature:analysis")
    implementation project(":feature:categories")
    implementation project(":feature:home")
    implementation project(":feature:settings")
    implementation project(":feature:transactionfor")
    implementation project(":feature:transactions")

    testImplementation project(":core:testing")

    androidTestImplementation project(":core:testing")

    // Androidx core
    implementation libs.androidx.core

    // Lifecycle components
    implementation libs.androidx.lifecycle.runtime

    // Appcompat
    implementation libs.androidx.appcompat

    // Jetpack compose
    implementation libs.androidx.compose.ui
    implementation libs.androidx.compose.util

    // Jetpack compose tooling support (Previews, etc.)
    debugImplementation libs.androidx.compose.tooling
    implementation libs.androidx.compose.preiew

    // Jetpack compose material design
    implementation libs.androidx.compose.material3

    // Jetpack compose material design adapter
    implementation libs.jetpack.compose.theme.adapter

    // Jetpack compose integration with activities
    implementation libs.androidx.activity.compose

    // Jetpack compose integration with view models
    implementation libs.androidx.lifecycle.viewmodel.compose

    // Jetpack compose lifecycle runtime
    implementation libs.androidx.runtime.compose

    // Jetpack compose navigation
    implementation libs.androidx.navigation.compose

    // Jetpack compose navigation with hilt
    implementation libs.androidx.hilt.navigation.compose

    // Jetpack compose paging
    implementation libs.androidx.paging.compose

    // Detekt formatting
    detektPlugins libs.detekt.formatting

    // Detekt compose
    detektPlugins libs.detekt.rules.compose

    // Hilt
    implementation libs.hilt.version
    kapt libs.dagger.hilt.compiler
    // ksp libs.dagger.hilt.compiler
    kapt libs.hilt.compiler
    // ksp libs.hilt.compiler

    // KSP
    implementation libs.ksp

    // JDK desugaring
    coreLibraryDesugaring libs.jdk.desugaring

    // Coil
    implementation libs.coil

    // Paging
    implementation libs.paging

    // Data store
    implementation libs.datastore

    // Room
    implementation libs.room.runtime
    implementation libs.room.ktx
    ksp libs.room.compiler
    androidTestImplementation libs.room.testing

    // Work manager
    implementation libs.work.manager

    // Firebase BoM
    implementation platform(libs.firebase)

    // Firebase analytics
    implementation libs.firebase.analytics

    // Firebase crashlytics
    implementation libs.firebase.crashlytics

    // Testing

    // JUnit
    testImplementation libs.junit

    // Android X test
    androidTestImplementation libs.test.core.ktx
    androidTestImplementation libs.test.ext
    androidTestImplementation libs.test.truth
    androidTestImplementation libs.test.runner
    androidTestImplementation libs.test.rules

    // Mockito kotlin
    testImplementation libs.mockito.kotlin

    // Coroutines test
    testImplementation libs.kotlinx.coroutines.test
    androidTestImplementation libs.kotlinx.coroutines.test

    // Turbine
    testImplementation libs.turbine

    // Hilt testing
    testImplementation libs.hilt.android.testing
    kaptTest libs.hilt.android.compiler
    androidTestImplementation libs.hilt.android.testing
    kaptAndroidTest libs.hilt.android.compiler

    // Jetpack compose UI tests
    androidTestImplementation libs.compose.ui.test.junit4

    // KakaoCup Compose
    androidTestImplementation libs.kakaocup.compose

    // Jetpack compose UI tests manifest - Needed for createComposeRule, but not createAndroidComposeRule
    debugImplementation libs.compose.ui.test.manifest
}

// Allow references to generated code
// Source - https://developer.android.com/training/dependency-injection/hilt-android
kapt {
    correctErrorTypes true
}

kover {
    instrumentation {
        excludeTasks.add "testReleaseUnitTest"
    }
}
