plugins {
    id "com.android.application"
    id "kotlin-android"
    id "kotlin-kapt"
    id "dagger.hilt.android.plugin"
    id "com.google.gms.google-services"
    id "jacoco"
    id "org.jetbrains.kotlinx.kover" version "0.5.1"
    id "io.gitlab.arturbosch.detekt"
    id "com.google.devtools.ksp" version "1.6.21-1.0.6"
}

// Kover
kover {
    disabled = false
    // true to disable instrumentation of all test tasks in all projects
    coverageEngine.set(kotlinx.kover.api.CoverageEngine.INTELLIJ)
    // change instrumentation agent and reporter
    intellijEngineVersion.set("1.0.668")    // change version of IntelliJ agent and reporter
    jacocoEngineVersion.set("0.8.7")        // change version of JaCoCo agent and reporter
    generateReportOnCheck = true
    // false to do not execute `koverMergedReport` task before `check` task
    disabledProjects = []
    // ["project-name"] or [":project-name"] to disable coverage for project with path `:project-name` (`:` for the root project)
    instrumentAndroidPackage = false
    // true to instrument packages `android.*` and `com.android.*`
    runAllTestsForProjectTask = false
    // true to run all tests in all projects if `koverHtmlReport`, `koverXmlReport`, `koverReport`, `koverVerify` or `check` tasks executed on some project
}

tasks.koverHtmlReport {
    excludes = [
            // Hilt
            "*.di.*",
            "dagger.hilt.**",
            "hilt_aggregated_deps.*",
            "com.makeappssimple.abhimanyu.financemanager.android.*.*_Factory",

            // Room
            // MyRoomDatabase_AutoMigration_*_Impl, *Dao_Impl
            "com.makeappssimple.abhimanyu.financemanager.android.*.*_Impl*",

            // BuildConfig
            "com.makeappssimple.abhimanyu.financemanager.android.BuildConfig",

            // Moshi - Json Adapter
            "com.makeappssimple.abhimanyu.financemanager.android.*.*JsonAdapter",

            // UI
            "com.makeappssimple.abhimanyu.financemanager.android.ui.*"
    ]
}

tasks.koverXmlReport {
    excludes = ["com.makeappssimple.abhimanyu.financemanager.android.navigation.di.NavigationManagerModule"]
}

// TODO-Abhi: Jacoco
// Jacoco
//jacoco {
//    toolVersion = "$jacocoVersion"
//}
//
//tasks.withType(Test) {
//    jacoco {
//        includeNoLocationClasses = true
//        excludes = ["jdk.internal.*"] // Allows it to run on Java 11
//    }
//}
//
//task jacocoTestReport(type: JacocoReport, dependsOn: ["testDebugUnitTest", "createDebugCoverageReport"]) {
//    reports {
//        xml.enabled true
//        html.enabled true
//    }
//    def fileFilter = [
//            "**/R.class",
//            "**/R$*.class",
//            "**/BuildConfig.*",
//            "**/Manifest*.*",
//            "**/*Test*.*",
//            "android/**/*.*",
//            "**/*$[0-9].*"
//    ]
//    def mainSrc = "$project.projectDir/src/main/java"
//    def javaDebugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
//    def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
//
//    sourceDirectories.from = files([mainSrc])
//    classDirectories.from = files([javaDebugTree], [kotlinDebugTree])
//    executionData.from = fileTree(dir: project.buildDir, includes: [
//            "jacoco/testDebugUnitTest.exec",
//            "outputs/code-coverage/connected/*coverage.ec",
//            "outputs/code_coverage/debugAndroidTest/connected/**/*.ec"
//    ])
//}


// API Key
def apikeyPropertiesFile = rootProject.file("apikey.properties")
def apikeyProperties = new Properties()
apikeyProperties.load(new FileInputStream(apikeyPropertiesFile))

android {
    namespace "com.makeappssimple.abhimanyu.financemanager.android"

    compileSdk rootProject.compileSdkVersion

    defaultConfig {
        applicationId "com.makeappssimple.abhimanyu.financemanager.android"
        minSdk rootProject.minSdkVersion
        targetSdk rootProject.targetSdkVersion
        versionCode rootProject.appVersionCode
        versionName rootProject.appVersionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }

        // Room schema
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }

        // should correspond to key/value pairs inside the file
        buildConfigField("String", "OPEN_EMOJI_KEY", apikeyProperties["OPEN_EMOJI_KEY"])
    }

    buildTypes {
        release {
            debuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
        }
        debug {
            applicationIdSuffix ".debug"
            debuggable true
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"

            // This should be true for Jacoco but false for compose testing
            // Jacoco
            testCoverageEnabled false
        }
    }

    // Kover
    testOptions {
        unitTests.all {
            if (name == "testDebugUnitTest") {
                kover {
                    disabled = false
                    binaryReportFile.set(file("$buildDir/custom/debug-report.bin"))
                    includes = [
                            "com.makeappssimple.abhimanyu.financemanager.android.*"
                    ]
                    excludes = [
                            "com.makeappssimple.abhimanyu.financemanager.android.ui.*",
                            "com.makeappssimple.abhimanyu.financemanager.android.navigation.di.NavigationManagerModule"
                    ]
                }
            }
        }
    }

    /*
    // TODO-Abhi: Jacoco
    // Jacoco
    testOptions {
        *//*execution "ANDROIDX_TEST_ORCHESTRATOR"*//*
        animationsDisabled true

        unitTests {
            all {
                jvmArgs "-noverify", "-ea"
                jacoco {
                    includeNoLocationClasses = true
                }
            }
            includeAndroidResources = true
        }
    }
    */

    compileOptions {
        // Flag to enable support for the new language APIs
        coreLibraryDesugaringEnabled = true

        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
        useIR = true

        freeCompilerArgs += [
                "-Xopt-in=androidx.compose.animation.core.InternalAnimationApi",
                "-Xopt-in=androidx.compose.animation.ExperimentalAnimationApi",
                "-Xopt-in=androidx.compose.foundation.ExperimentalFoundationApi",
                "-Xopt-in=androidx.compose.material.ExperimentalMaterialApi",
                "-Xopt-in=androidx.compose.material3.ExperimentalMaterial3Api",
                "-Xopt-in=androidx.compose.runtime.ExperimentalComposeApi",
                "-Xopt-in=androidx.compose.ui.ExperimentalComposeUiApi",
                "-Xopt-in=com.google.accompanist.navigation.material.ExperimentalMaterialNavigationApi",
                "-Xopt-in=com.google.accompanist.pager.ExperimentalPagerApi",
                "-Xopt-in=com.google.accompanist.permissions.ExperimentalPermissionsApi",
                "-Xopt-in=kotlin.contracts.ExperimentalContracts",
                "-Xopt-in=kotlin.ExperimentalUnsignedTypes",
                "-Xopt-in=kotlin.RequiresOptIn",
                "-Xopt-in=kotlin.time.ExperimentalTime",
                "-Xopt-in=kotlinx.coroutines.ExperimentalCoroutinesApi",
                "-Xopt-in=kotlinx.coroutines.FlowPreview",
                "-Xopt-in=kotlinx.coroutines.InternalCoroutinesApi",
                "-Xopt-in=kotlinx.coroutines.ObsoleteCoroutinesApi"
        ]
    }

    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion jetpackComposeCompilerVersion
    }

    packagingOptions {
        resources {
            excludes += "/META-INF/{AL2.0,LGPL2.1}"
        }
    }

    // Room schema for testing
    sourceSets {
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }
}

ksp {
    arg("room.schemaLocation", "$projectDir/schemas")
}

dependencies {
    implementation project(":core-common")
    implementation project(":core-database")
    implementation project(":core-designsystem")

    // Androidx core
    implementation "androidx.core:core-ktx:$rootProject.androidXCoreVersion"

    // Lifecycle components
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$rootProject.lifecycleViewModelVersion"

    // Appcompat
    implementation "androidx.appcompat:appcompat:$rootProject.appCompatVersion"

    // Jetpack compose
    implementation "androidx.compose.ui:ui:$rootProject.jetpackComposeVersion"
    implementation "androidx.compose.ui:ui-util:$rootProject.jetpackComposeVersion"

    // Jetpack compose tooling support (Previews, etc.)
    debugImplementation "androidx.compose.ui:ui-tooling:$rootProject.jetpackComposeVersion"
    implementation "androidx.compose.ui:ui-tooling-preview:$rootProject.jetpackComposeVersion"

    // Icons
    implementation "androidx.compose.material:material-icons-extended:$rootProject.jetpackComposeVersion"

    // Jetpack compose material design
    implementation "androidx.compose.material:material:$rootProject.jetpackComposeVersion"
    implementation "androidx.compose.material3:material3:$rootProject.jetpackComposeMaterial3Version"

    // Jetpack compose material design adapter
    implementation "com.google.android.material:compose-theme-adapter:$rootProject.jetpackComposeMaterialDesignAdapterVersion"

    // Jetpack compose integration with activities
    implementation "androidx.activity:activity-compose:$rootProject.jetpackComposeActivityIntegrationVersion"

    // Jetpack compose integration with view models
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:$rootProject.jetpackComposeViewModelIntegrationVersion"

    // Jetpack compose navigation
    implementation "androidx.navigation:navigation-compose:$rootProject.jetpackComposeNavigationVersion"

    // Jetpack compose navigation with hilt
    implementation "androidx.hilt:hilt-navigation-compose:$rootProject.jetpackComposeNavigationHiltVersion"

    // Accompanist
    implementation "com.google.accompanist:accompanist-insets:$rootProject.accompanistVersion"

    // Accompanist flow layout
    implementation "com.google.accompanist:accompanist-flowlayout:$rootProject.accompanistVersion"

    // Accompanist pager
    implementation "com.google.accompanist:accompanist-pager:$rootProject.accompanistVersion"

    // Accompanist pager indicators
    implementation "com.google.accompanist:accompanist-pager-indicators:$rootProject.accompanistVersion"

    // Detekt formatting
    detektPlugins("io.gitlab.arturbosch.detekt:detekt-formatting:$rootProject.detektFormattingVersion")

    // Detekt compose
    detektPlugins("ru.kode:detekt-rules-compose:$rootProject.detektComposeVersion")

    // Hilt
    implementation "com.google.dagger:hilt-android:$rootProject.hiltVersion"
    kapt "com.google.dagger:hilt-compiler:$rootProject.hiltVersion"
    // ksp "com.google.dagger:hilt-compiler:$rootProject.hiltVersion"
    implementation "androidx.hilt:hilt-lifecycle-viewmodel:$rootProject.hiltLifecycleViewModelVersion"
    kapt "androidx.hilt:hilt-compiler:$rootProject.hiltCompilerVersion"
    // ksp "androidx.hilt:hilt-compiler:$rootProject.hiltCompilerVersion"

    // KSP
    implementation "com.google.devtools.ksp:symbol-processing-api:$rootProject.kspVersion"

    // JDK desugaring
    coreLibraryDesugaring("com.android.tools:desugar_jdk_libs:$rootProject.jdkDesugaringVersion")

    // Moshi
    implementation "com.squareup.moshi:moshi:$rootProject.moshiVersion"
    implementation "com.squareup.moshi:moshi-kotlin:$rootProject.moshiKotlinVersion"
    // kapt "com.squareup.moshi:moshi-kotlin-codegen:$rootProject.moshiKotlinCodegenVersion"
    ksp "com.squareup.moshi:moshi-kotlin-codegen:$rootProject.moshiVersion"

    // Retrofit with Moshi Converter
    implementation "com.squareup.retrofit2:converter-moshi:$rootProject.retrofitMoshiConverterVersion"

    // Coil
    implementation "io.coil-kt:coil:$rootProject.coilVersion"

    // Gson
    implementation "com.google.code.gson:gson:$rootProject.gsonVersion"

    // Data store
    implementation "androidx.datastore:datastore-preferences:$rootProject.datastorePreferencesVersion"

    // Room
    implementation "androidx.room:room-runtime:$rootProject.roomVersion"
    implementation "androidx.room:room-ktx:$rootProject.roomVersion"
    annotationProcessor "androidx.room:room-compiler:$rootProject.roomVersion"
    // kapt "androidx.room:room-compiler:$rootProject.roomVersion"
    ksp "androidx.room:room-compiler:$rootProject.roomVersion"
    androidTestImplementation "androidx.room:room-testing:$rootProject.roomVersion"

    // Firebase BoM
    implementation platform("com.google.firebase:firebase-bom:$rootProject.firebaseBomVersion")

    // Firebase analytics
    implementation "com.google.firebase:firebase-analytics-ktx"

    // Testing

    // Junit
    testImplementation "junit:junit:$rootProject.junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$rootProject.androidXJUnitExtensionVersion"

    // Mockito kotlin
    testImplementation "org.mockito.kotlin:mockito-kotlin:$rootProject.mockitoKotlinVersion"

    // Coroutines test
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$rootProject.coroutinesTestVersion"

    // Jacoco
    androidTestImplementation "androidx.test:runner:$rootProject.testRunnerVersion"
    androidTestImplementation "androidx.test:rules:$rootProject.testRulesVersion"

    // Espresso
    androidTestImplementation "androidx.test.espresso:espresso-core:$rootProject.espressoVersion"

    // Jetpack compose UI tests
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$rootProject.jetpackComposeVersion"

    // Jetpack compose UI tests manifest - Needed for createComposeRule, but not createAndroidComposeRule
    debugImplementation("androidx.compose.ui:ui-test-manifest:$rootProject.jetpackComposeVersion")
}
